#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dynamic_reconfigure.parameter_generator_catkin as param

gen = param.ParameterGenerator()

frame_rate_desc = "The Acquisition Frame Rate parameter sets the absolute value of the acquisition frame rate. The absolute value is a float value that sets the acquisition frame rate in frames per second."
gen.add("AcquisitionFrameRate", param.double_t, 0, frame_rate_desc,
    default=30, min=0, max=100)

frame_rate_enable_desc = "Allow AcquisitionFrameRate to set frame rate. Otherwise, set by exposure time."
gen.add("AcquisitionFrameRateEnable", param.bool_t, 0, frame_rate_desc,
    default=True)

exposure_time_desc = "This float value sets the cameras exposure time in microseconds."
gen.add("ExposureTime", param.double_t, 0, exposure_time_desc,
    default=15000, min=0, max=1000000)

acquisition_mode_desc = "This enumeration sets the image acquisition mode."
acquisition_mode = gen.enum([
        gen.const("SingleFrame", param.str_t, "SingleFrame", "Sets the acquisition mode to single frame."),
        gen.const("Continuous", param.str_t, "Continuous", "Sets the acquisition mode to continuous."),
    ], acquisition_mode_desc)
gen.add("AcquisitionMode", param.str_t, 0, acquisition_mode_desc, default="Continuous", edit_method=acquisition_mode)

exposure_auto_desc = "Control the exposure auto function."
exposure_auto = gen.enum([
        gen.const("Exposure_Off", param.str_t, "Off", "Disables the exposure auto function."),
        gen.const("Exposure_Once", param.str_t, "Once", "Sets the exposure auto function mode of operation to - once."),
        gen.const("Exposure_Continuous", param.str_t, "Continuous", "Sets the exposure auto function mode of operation to - continuous."),
    ], exposure_auto_desc)
gen.add("ExposureAuto", param.str_t, 0, exposure_auto_desc, default="Off", edit_method=exposure_auto)

gain_auto_desc = "Control the Gain Auto function."
gain_auto = gen.enum([
        gen.const("Gain_Off", param.str_t, "Off", "Disables the Gain Auto function."),
        gen.const("Gain_Once", param.str_t, "Once", "Sets the auto function mode of operation to - once."),
        gen.const("Gain_Continuous", param.str_t, "Continuous", "Sets the auto function mode of operation to - continuous."),
    ], gain_auto_desc)
gen.add("GainAuto", param.str_t, 0, gain_auto_desc, default="Off", edit_method=gain_auto)

gain_desc = "This float value sets the camera's gain."
gen.add("Gain", param.double_t, 0, gain_desc,
    default=1, min=0, max=100)

line_selector_desc = "This enumeration selects the internally generated camera signal (source signal) for the selected line when the selected line is an output."
line_selector = gen.enum([
        gen.const("Line_Selector_Line1", param.str_t, "Line1", "Selects line 1 for configuration."),
        gen.const("Line_Selector_Line2", param.str_t, "Line2", "Selects line 2 for configuration."),
        gen.const("Line_Selector_Line3", param.str_t, "Line3", "Selects line 3 for configuration."),
        gen.const("Line_Selector_Line4", param.str_t, "Line4", "Selects line 4 for configuration."),
    ], line_selector_desc)
gen.add("LineSelector", param.str_t, 0, line_selector_desc, default="Line1", edit_method=line_selector)

line_mode_desc = "This feature controls whether the physical line is used to input or output a signal. When a line supports input and output mode, the default state is input to avoid possible electrical contention. The Line Mode parameter can take any of the following values: Input: The selected physical line is used to input an electrical signal. Output: The selected physical line is used to output an electrical signal."
line_mode = gen.enum([
        gen.const("Line_Mode_Input", param.str_t, "Input", "Sets the mode for the selected line to input."),
        gen.const("Line_Mode_Output", param.str_t, "Output", "Sets the mode for the selected line to output"),
    ], line_mode_desc)
gen.add("LineMode", param.str_t, 0, line_mode_desc, default="Input", edit_method=line_mode)

line_source_desc = "This enumeration selects the internally generated camera signal (source signal) for the selected line when the selected line is an output."
line_source = gen.enum([
        gen.const("LineSource_Off", param.str_t, "Off", "Sets the source signal for the selected output line to off"),
        gen.const("LineSource_ExposureActive", param.str_t, "ExposureActive", "Sets the source signal for the selected output line to exposure active"),
        gen.const("LineSource_FrameTriggerWait", param.str_t, "FrameTriggerWait", "Associates the Frame Trigger Wait status with the selected output line."),
        gen.const("LineSource_FrameBurstTriggerWait", param.str_t, "FrameBurstTriggerWait", "Associates the Frame Burst Trigger Wait status with the selected output line."),
        gen.const("LineSource_Timer1Active", param.str_t, "Timer1Active", "Sets the source signal for the selected output line to timer 1 active."),
        gen.const("LineSource_UserOutput0", param.str_t, "UserOutput0", "Sets the source signal for the selected output line to user settable output signal 0."),
        gen.const("LineSource_UserOutput1", param.str_t, "UserOutput1", "Sets the source signal for the selected output line to user settable output signal 1."),
        gen.const("LineSource_UserOutput2", param.str_t, "UserOutput2", "Sets the source signal for the selected output line to user settable output signal 2."),
        gen.const("LineSource_UserOutput3", param.str_t, "UserOutput3", "Sets the source signal for the selected output line to user settable output signal 3."),
        gen.const("LineSource_FlashWindow", param.str_t, "FlashWindow", "Flash Window signal as a line source."),
    ], line_source_desc)
gen.add("LineSource", param.str_t, 0, line_source_desc, default="Off", edit_method=line_source)

line_inverter_desc = "This boolean value enables the signal inverter function for the selected input or output line."
gen.add("LineInverter", param.bool_t, 0, line_inverter_desc, False)

trigger_selector_desc = "This enumeration selects the trigger type to configure. Once a trigger type has been selected, all changes to the trigger settings will be applied to the selected trigger."
trigger_selector = gen.enum([
        gen.const("FrameBurstStart", param.str_t, "FrameBurstStart", "Selects the frame burst start trigger for configuration."),
        gen.const("FrameStart", param.str_t, "FrameStart", "Selects the frame start trigger for configuration."),
    ], trigger_selector_desc)
gen.add("TriggerSelector", param.str_t, 0, trigger_selector_desc, default="FrameBurstStart", edit_method=trigger_selector)

trigger_mode_desc = "This enumeration sets the trigger mode for the selected trigger."
trigger_mode = gen.enum([
        gen.const("Trigger_Mode_Off", param.str_t, "Off", "Sets the mode for the selected trigger to - off."),
        gen.const("Trigger_Mode_On", param.str_t, "On", "Sets the mode for the selected trigger to - on."),
    ], trigger_mode_desc)
gen.add("TriggerMode", param.str_t, 0, trigger_mode_desc, default="Off", edit_method=trigger_mode)

trigger_source_desc = "The Trigger Source parameter specifies the source signal that will act as the frame start trigger signal."
trigger_source = gen.enum([
        gen.const("Trigger_Source_Software", param.str_t, "Software", "Sets the software trigger as the signal source for the selected trigger."),
        gen.const("Trigger_Source_Line1", param.str_t, "Line1", "Sets the signal source for the selected trigger to line 1"),
        gen.const("Trigger_Source_Line2", param.str_t, "Line2", "Sets the signal source for the selected trigger to line 2"),
        gen.const("Trigger_Source_Line3", param.str_t, "Line3", "Sets the signal source for the selected trigger to line 3"),
        gen.const("Trigger_Source_Line4", param.str_t, "Line4", "Sets the signal source for the selected trigger to line 4"),
        gen.const("Trigger_Source_SoftwareSignal1", param.str_t, "SoftwareSignal1 ", "Selects the SoftwareSignal1 software command."),
        gen.const("Trigger_Source_SoftwareSignal2", param.str_t, "SoftwareSignal2 ", "Selects the SoftwareSignal2 software command."),
        gen.const("Trigger_Source_SoftwareSignal3", param.str_t, "SoftwareSignal3 ", "Selects the SoftwareSignal3 software command."),
    ], trigger_source_desc)
gen.add("TriggerSource", param.str_t, 0, trigger_source_desc, default="Line1", edit_method=trigger_source)

trigger_activation_desc = "This enumeration sets the signal transition needed to activate the selected trigger."
trigger_activation = gen.enum([
        gen.const("TriggerActivation_RisingEdge", param.str_t, "RisingEdge", "Sets the selected trigger to become active on the rising edge of the source signal."),
        gen.const("TriggerActivation_FallingEdge", param.str_t, "FallingEdge", "Sets the selected trigger to become active on the falling edge of the source signal."),
        gen.const("TriggerActivation_AnyEdge", param.str_t, "AnyEdge", "Sets the selected trigger to become active on the falling or rising edge of the source signal."),
        gen.const("TriggerActivation_LevelHigh", param.str_t, "LevelHigh", "Sets the selected trigger to become active when the source signal is high."),
        gen.const("TriggerActivation_LevelLow", param.str_t, "LevelLow", "Sets the selected trigger to become active when the source signal is low."),
    ], trigger_activation_desc)
gen.add("TriggerActivation", param.str_t, 0, trigger_activation_desc, default="RisingEdge", edit_method=trigger_activation)


exit(gen.generate("basler_camera", "basler_camera", "Camera"))
